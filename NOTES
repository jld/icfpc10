car = chamber list
chamber = pipe * pipe * auxp
pipe = section list
section = fuelidx
fuelidx = int
fuels = matrix array/fuelidx

chamberp (pu, pl, ap) = all (map (if ap >= >) (eval pu) (eval pl))
eval [] = air
eval s::p = mat* fuels[s] (eval p)

matrix = nat array/compidx array/compidx
air : nat array/compidx

19L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L:
19L

X::X
X:0L0R0#0L0R:X



A = 11
    01

B = 10
    11



A(x,y) = (x+y, y)
B(x,y) = (x, x+y)


======
Okay, on maybe solving by hill-climbing or whatever:

-1) do chamber stats
0) pick a random fuel; evaluate
0') badness is (num of unsat chambers, maybe num of unsat mat elem)
0'') sum stats on unsat chambers
1) generate perturbed copy
1') raise when stats say top, lower when stats say btm, but maybe a chance out
2) If not worse, take
